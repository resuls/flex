'use client';

import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Star, TrendingUp, TrendingDown, Users, CheckCircle, Clock, AlertTriangle, Building2 } from 'lucide-react';
import Link from 'next/link';
import { ReviewFilters, Review, PropertyStats } from '@/lib/types';
import { toast } from 'sonner';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';

export default function Dashboard() {
  const [filters, setFilters] = useState<ReviewFilters>({});
  const [selectedReviews, setSelectedReviews] = useState<Set<string>>(new Set());
  const [useMockData, setUseMockData] = useState<boolean>(false);
  const [showPlaceIds, setShowPlaceIds] = useState<boolean>(false);
  const queryClient = useQueryClient();

  // Fetch reviews
  const { data: reviewsData, isLoading: reviewsLoading } = useQuery({
    queryKey: ['reviews', filters],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filters.search) params.append('search', filters.search);
      if (filters.source) params.append('source', filters.source);
      if (filters.status) params.append('status', filters.status);
      if (filters.propertyId) params.append('propertyId', filters.propertyId);
      if (filters.rating?.[0]) params.append('minRating', filters.rating[0].toString());
      if (filters.rating?.[1]) params.append('maxRating', filters.rating[1].toString());
      
      const response = await fetch(`/api/reviews?${params}`);
      if (!response.ok) throw new Error('Failed to fetch reviews');
      return response.json();
    },
  });

  // Fetch property stats
  const { data: propertiesData, isLoading: propertiesLoading } = useQuery({
    queryKey: ['properties'],
    queryFn: async () => {
      const response = await fetch('/api/properties');
      if (!response.ok) throw new Error('Failed to fetch properties');
      return response.json();
    },
  });

  // Initialize Hostaway data
  const { mutate: initializeHostaway, isPending: initializingHostaway } = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/reviews/hostaway');
      if (!response.ok) throw new Error('Failed to initialize Hostaway data');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reviews'] });
      queryClient.invalidateQueries({ queryKey: ['properties'] });
      queryClient.invalidateQueries({ queryKey: ['property-reviews'] });
      toast.success('Hostaway reviews loaded successfully');
    },
    onError: (error) => {
      toast.error('Failed to load Hostaway reviews: ' + error.message);
    },
  });

  // Initialize Google Reviews data
  const { mutate: initializeGoogleReviews, isPending: initializingGoogleReviews } = useMutation({
    mutationFn: async () => {
      const params = new URLSearchParams();
      if (useMockData) {
        params.append('forceMock', 'true');
      }
      const response = await fetch(`/api/reviews/google?${params}`);
      if (!response.ok) throw new Error('Failed to initialize Google Reviews data');
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['reviews'] });
      queryClient.invalidateQueries({ queryKey: ['properties'] });
      queryClient.invalidateQueries({ queryKey: ['property-reviews'] });
      const source = data.source || 'unknown';
      toast.success(`Google Reviews loaded successfully (${source === 'mock' ? 'Mock Data' : 'Real API'})`);
    },
    onError: (error) => {
      toast.error('Failed to load Google Reviews: ' + error.message);
    },
  });

  // Fetch Place IDs for debugging
  const { data: placeIdsData, mutate: fetchPlaceIds, isPending: fetchingPlaceIds } = useMutation({
    mutationFn: async (refresh: boolean = false) => {
      const params = new URLSearchParams();
      if (refresh) params.append('refresh', 'true');
      const response = await fetch(`/api/reviews/google/place-ids?${params}`);
      if (!response.ok) throw new Error('Failed to fetch Place IDs');
      return response.json();
    },
    onSuccess: (data) => {
      toast.success('Place IDs fetched successfully');
      console.log('Place IDs Data:', data);
    },
    onError: (error) => {
      toast.error('Failed to fetch Place IDs: ' + error.message);
    },
  });

  // Update review approval
  const { mutate: updateReview } = useMutation({
    mutationFn: async ({ id, isApprovedForPublic, managerNotes }: { id: string; isApprovedForPublic?: boolean; managerNotes?: string }) => {
      const response = await fetch('/api/reviews', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, isApprovedForPublic, managerNotes }),
      });
      if (!response.ok) throw new Error('Failed to update review');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reviews'] });
      queryClient.invalidateQueries({ queryKey: ['properties'] });
      queryClient.invalidateQueries({ queryKey: ['property-reviews'] });
      toast.success('Review updated successfully');
    },
    onError: (error) => {
      toast.error('Failed to update review: ' + error.message);
    },
  });

  const reviews: Review[] = reviewsData?.data || [];
  const properties: PropertyStats[] = propertiesData?.data || [];

  // Calculate overview stats
  const totalReviews = reviews.length;
  const averageRating = reviews.length > 0 
    ? reviews.filter(r => r.rating).reduce((sum, r) => sum + (r.rating || 0), 0) / reviews.filter(r => r.rating).length
    : 0;
  const approvedReviews = reviews.filter(r => r.isApprovedForPublic).length;
  const pendingReviews = reviews.filter(r => !r.isApprovedForPublic).length;

  // Prepare chart data
  const ratingDistribution = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(rating => ({
    rating,
    count: reviews.filter(r => Math.floor(r.rating || 0) === rating).length,
  }));

  const categoryData = reviews.reduce((acc, review) => {
    review.categories.forEach(cat => {
      if (!acc[cat.category]) {
        acc[cat.category] = { category: cat.category, total: 0, count: 0 };
      }
      acc[cat.category].total += cat.rating;
      acc[cat.category].count += 1;
    });
    return acc;
  }, {} as Record<string, { category: string; total: number; count: number }>);

  const categoryAverages = Object.values(categoryData).map(cat => ({
    category: cat.category,
    average: cat.count > 0 ? cat.total / cat.count : 0,
  }));

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Reviews Dashboard</h1>
              <p className="text-gray-600">Manage and analyze property reviews</p>
            </div>
            <div className="flex flex-col gap-4">
              {/* Data Source Controls */}
              <div className="flex items-center gap-4 bg-gray-50 p-3 rounded-lg">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="mock-data"
                    checked={useMockData}
                    onCheckedChange={setUseMockData}
                  />
                  <Label htmlFor="mock-data" className="text-sm">
                    Use Mock Data {useMockData ? '(Mock)' : '(Real API)'}
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="show-place-ids"
                    checked={showPlaceIds}
                    onCheckedChange={setShowPlaceIds}
                  />
                  <Label htmlFor="show-place-ids" className="text-sm">
                    Show Place IDs Debug
                  </Label>
                </div>
              </div>

              {/* Action Buttons */}
            <div className="flex gap-3">
              <Link href="/hotels">
                <Button variant="outline">
                  <Building2 className="mr-2 h-4 w-4" />
                  Hotels Dashboard
                </Button>
              </Link>
              <Button 
                onClick={() => initializeHostaway()} 
                disabled={initializingHostaway}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {initializingHostaway ? 'Loading...' : 'Sync Hostaway Reviews'}
              </Button>
                <Button 
                  onClick={() => initializeGoogleReviews()} 
                  disabled={initializingGoogleReviews}
                  className="bg-green-600 hover:bg-green-700"
                >
                  {initializingGoogleReviews ? 'Loading...' : `Sync Google Reviews ${useMockData ? '(Mock)' : '(Real)'}`}
                </Button>
                {showPlaceIds && (
                  <Button 
                    onClick={() => fetchPlaceIds(true)} 
                    disabled={fetchingPlaceIds}
                    variant="outline"
                    className="border-purple-600 text-purple-600 hover:bg-purple-50"
                  >
                    {fetchingPlaceIds ? 'Loading...' : 'Refresh Place IDs'}
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Place IDs Debug Panel */}
        {showPlaceIds && placeIdsData && (
          <Card className="mb-8 border-purple-200 bg-purple-50">
            <CardHeader>
              <CardTitle className="text-purple-900">🔍 Google Places Debug Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Property Addresses */}
                <div>
                  <h4 className="font-medium text-purple-900 mb-3">Property Addresses</h4>
                  <div className="space-y-2">
                    {Object.entries(placeIdsData.data.propertyAddresses).map(([propertyId, info]) => (
                      <div key={propertyId} className="bg-white p-3 rounded border">
                        <div className="font-medium text-sm">{propertyId}</div>
                        <div className="text-sm text-gray-600">{info.name}</div>
                        <div className="text-xs text-gray-500">{info.address}</div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Discovered Place IDs */}
                <div>
                  <h4 className="font-medium text-purple-900 mb-3">Discovered Place IDs</h4>
                  <div className="space-y-2">
                    {Object.keys(placeIdsData.data.propertyAddresses).map((propertyId) => {
                      const placeId = placeIdsData.data.discoveredPlaceIds[propertyId];
                      return (
                        <div key={propertyId} className="bg-white p-3 rounded border">
                          <div className="font-medium text-sm">{propertyId}</div>
                          <div className={`text-xs font-mono ${placeId ? 'text-green-600' : 'text-red-600'}`}>
                            {placeId || 'Not found'}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Reviews</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalReviews}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
              <Star className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{averageRating.toFixed(1)}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Approved</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{approvedReviews}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pending</CardTitle>
              <Clock className="h-4 w-4 text-orange-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-600">{pendingReviews}</div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="reviews" className="space-y-6">
          <TabsList>
            <TabsTrigger value="reviews">Reviews Management</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="properties">Properties</TabsTrigger>
          </TabsList>

          <TabsContent value="reviews" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardHeader>
                <CardTitle>Filters</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div>
                    <Label htmlFor="search">Search</Label>
                    <Input
                      id="search"
                      placeholder="Search reviews, guests, properties..."
                      value={filters.search || ''}
                      onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="source">Source</Label>
                    <Select value={filters.source || 'all'} onValueChange={(value) => setFilters(prev => ({ ...prev, source: value === 'all' ? undefined : value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="All sources" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All sources</SelectItem>
                        <SelectItem value="hostaway">Hostaway</SelectItem>
                        <SelectItem value="google">Google Reviews</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="status">Status</Label>
                    <Select value={filters.status || 'all'} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value === 'all' ? undefined : value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="All statuses" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All statuses</SelectItem>
                        <SelectItem value="published">Published</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="rejected">Rejected</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="property">Property</Label>
                    <Select value={filters.propertyId || 'all'} onValueChange={(value) => setFilters(prev => ({ ...prev, propertyId: value === 'all' ? undefined : value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="All properties" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All properties</SelectItem>
                        {properties.map(property => (
                          <SelectItem key={property.propertyId} value={property.propertyId}>
                            {property.propertyName}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Reviews List */}
            <Card>
              <CardHeader>
                <CardTitle>Reviews ({reviews.length})</CardTitle>
              </CardHeader>
              <CardContent>
                {reviewsLoading ? (
                  <div className="text-center py-8">Loading reviews...</div>
                ) : (
                  <div className="space-y-4">
                    {reviews.map((review) => (
                      <div key={review.id} className="border rounded-lg p-4 space-y-3">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge variant={review.source === 'hostaway' ? 'default' : review.source === 'google' ? 'outline' : 'secondary'}>
                                {review.source === 'hostaway' ? 'Hostaway' : review.source === 'google' ? 'Google Reviews' : review.source}
                              </Badge>
                              <Badge variant={review.isApprovedForPublic ? 'default' : 'secondary'}>
                                {review.isApprovedForPublic ? 'Approved' : 'Pending'}
                              </Badge>
                              {review.rating && (
                                <div className="flex items-center gap-1">
                                  <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                                  <span className="font-medium">{review.rating}/10</span>
                                </div>
                              )}
                            </div>
                            <h3 className="font-semibold">{review.guestName}</h3>
                            <p className="text-sm text-gray-600 mb-2">{review.propertyName}</p>
                            <p className="text-gray-700">{review.publicReview}</p>
                            {review.categories.length > 0 && (
                              <div className="flex flex-wrap gap-2 mt-2">
                                {review.categories.map((cat) => (
                                  <Badge key={cat.id} variant="outline">
                                    {cat.category}: {cat.rating}/10
                                  </Badge>
                                ))}
                              </div>
                            )}
                          </div>
                          <div className="flex items-center gap-2">
                            <div className="flex items-center space-x-2">
                              <Switch
                                checked={review.isApprovedForPublic}
                                onCheckedChange={(checked) => 
                                  updateReview({ id: review.id, isApprovedForPublic: checked })
                                }
                              />
                              <Label>Public</Label>
                            </div>
                          </div>
                        </div>
                        <div className="text-xs text-gray-500">
                          Submitted: {new Date(review.submittedAt).toLocaleDateString()}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Rating Distribution */}
              <Card>
                <CardHeader>
                  <CardTitle>Rating Distribution</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={ratingDistribution}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="rating" />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="count" fill="#3b82f6" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Category Averages */}
              <Card>
                <CardHeader>
                  <CardTitle>Category Performance</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <RadarChart data={categoryAverages}>
                      <PolarGrid />
                      <PolarAngleAxis dataKey="category" />
                      <PolarRadiusAxis angle={90} domain={[0, 10]} />
                      <Radar
                        name="Average Rating"
                        dataKey="average"
                        stroke="#3b82f6"
                        fill="#3b82f6"
                        fillOpacity={0.3}
                      />
                    </RadarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="properties" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {propertiesLoading ? (
                <div className="col-span-full text-center py-8">Loading properties...</div>
              ) : (
                properties.map((property) => (
                  <Card key={property.propertyId}>
                    <CardHeader>
                      <CardTitle className="text-lg">{property.propertyName}</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-gray-600">Total Reviews</p>
                          <p className="text-2xl font-bold">{property.totalReviews}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Avg Rating</p>
                          <div className="flex items-center gap-1">
                            <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                            <p className="text-2xl font-bold">{property.averageRating.toFixed(1)}</p>
                          </div>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-gray-600">Approved</p>
                          <p className="text-lg font-semibold text-green-600">{property.approvedReviews}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Pending</p>
                          <p className="text-lg font-semibold text-orange-600">{property.pendingReviews}</p>
                        </div>
                      </div>
                      {Object.keys(property.categoryAverages).length > 0 && (
                        <div>
                          <p className="text-sm text-gray-600 mb-2">Category Averages</p>
                          <div className="space-y-1">
                            {Object.entries(property.categoryAverages).map(([category, average]) => (
                              <div key={category} className="flex justify-between text-sm">
                                <span className="capitalize">{category}</span>
                                <span className="font-medium">{average.toFixed(1)}/10</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
